import java.nio.file.Path
import java.nio.file.Paths

import groovy.io.FileType

plugins {
  // id "com.github.johnrengelman.shadow" version "7.1.0"
  id "com.cognifide.aem.bundle"
  id "java"
}

tasks.withType(JavaCompile) {
  //enable compilation in a separate daemon process
  options.fork = true
  options.encoding = 'UTF-8'

  sourceCompatibility = 1.8 //11
  targetCompatibility = 1.8 //11
}

LinkedList<String> findRelativePaths(final File baseDir, FileType fileType, String fileNamePattern) {
  def relPaths = new LinkedList<String>()
  Path rootPath = Paths.get(baseDir.absolutePath)
  String ptn = "(?ui)" + fileNamePattern

  baseDir.eachFileRecurse (fileType) { file ->
    if(file.name.matches(ptn)) {
      String relPath = rootPath.relativize(Paths.get(file.absolutePath)).toString()
      relPaths.add("/"+relPath.replace("\\","/"))
    }
  }

  return relPaths
}

jar {

  doLast {


    def classFiles = fileTree(dir: sourceSets.main.java.outputDir)
    classFiles.include "**/*.class"
    def libFiles = fileTree(dir: "$projectDir/lib")
    libFiles.include "**/*.jar"
    if(!classFiles.isEmpty() && !libFiles.isEmpty()) {

      // extract MANIFEST.MF
      def jarFile = file(jar.archiveFile).absolutePath

      ant.unjar(src: jarFile, dest: "build/embed") {
        patternset {
          include name : "**/MANIFEST.MF"
        }
      }

      // collect classpath
      LinkedList<String> jars = findRelativePaths(file("$projectDir/lib"), FileType.FILES, ".*\\.jar")
      def bundleClassPath = "."
      jars.each {
        bundleClassPath += "," + it.substring(1)
      }

      // update MANIFEST.MF
      ant.manifest(file: "build/embed/META-INF/MANIFEST.MF", mode:"update") {
        attribute name:"Bundle-ClassPath", value: bundleClassPath
        attribute name:"Sling-Model-Packages", value: "ca.dc.study.sling,ca.dc.wkndspa.core.models"
      }

      // update osgi bundle
      ant.jar(update : true, destfile : jarFile, basedir : "lib", manifest: "build/embed/META-INF/MANIFEST.MF")
    }
  }
}

repositories {
  maven { url 'https://repo.adobe.com/nexus/content/groups/public/' }
  mavenCentral()
}

dependencies() {
  // AEM runtime dependencies
  compileOnly "org.osgi:org.osgi.annotation.versioning:1.1.0"
  compileOnly "org.osgi:org.osgi.annotation.bundle:1.0.0"
  compileOnly "org.osgi:org.osgi.service.metatype.annotations:1.4.0"
  compileOnly "org.osgi:org.osgi.service.component.annotations:1.4.0"
  compileOnly "org.osgi:org.osgi.service.component:1.4.0"
  compileOnly "org.osgi:org.osgi.service.cm:1.6.0"
  compileOnly "org.osgi:org.osgi.service.event:1.4.0"
  compileOnly "org.osgi:org.osgi.service.log:1.4.0"
  compileOnly "org.osgi:org.osgi.framework:1.9.0"
  compileOnly "org.osgi:org.osgi.resource:1.0.0"
  compileOnly "org.slf4j:slf4j-api:1.7.21"
  compileOnly "javax.jcr:jcr:2.0"
  compileOnly "javax.servlet:javax.servlet-api:3.1.0"
  compileOnly "javax.annotation:javax.annotation-api:1.3.2"
  compileOnly "org.apache.sling:org.apache.sling.servlets.annotations:1.2.6"
  compileOnly "org.apache.sling:org.apache.sling.models.api:1.3.8"
  //compileOnly 'com.adobe.aem:uber-jar:6.5.8:apis-with-deprecations'
  compileOnly 'com.adobe.aem:uber-jar:6.5.8'
  //compileOnly 'com.adobe.granite:com.adobe.granite.workflow.api:1.0.0'
  compileOnly 'com.adobe.aemfd:aemfd-client-sdk:6.3.0'
  compileOnly 'com.adobe.aemfd:aemfd-client-sdk-test:4.0.70'

  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

  compileOnly( group: 'dom4j', name: 'dom4j', version: '1.6.1' ) {
    transitive = false
  }
  compileOnly fileTree(dir: 'lib', include: '**/*.jar')
  compileOnly 'commons-codec:commons-codec:1.13'
  compileOnly 'org.apache.commons:commons-collections4:4.4'
  compileOnly 'org.apache.commons:commons-compress:1.19'
  compileOnly 'org.apache.commons:commons-math3:3.6.1'

  compileOnly 'org.apache.httpcomponents:httpclient:4.5.6'
  compileOnly 'org.apache.httpcomponents:httpcore:4.4.10'
  //compileOnly 'mysql:mysql-connector-java:8.0.22'

  //UnboundID LDAP SDK for Java
  compileOnly 'com.unboundid:unboundid-ldapsdk:6.0.4'

  // jjwt library
  compileOnly 'io.jsonwebtoken:jjwt-api:0.11.2'
  compileOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
  // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
  //compileOnly 'org.bouncycastle:bcprov-jdk15on:1.60'
  compileOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2' // or 'io.jsonwebtoken:jjwt-gson:0.11.2' for gson
  //compileOnly project(':gcdp_service')
  //implementation project(':wet5')

  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.0"
  testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.0"
  // AEM test dependencies
  testImplementation "io.wcm:io.wcm.testing.aem-mock.junit5:2.5.2"
  testImplementation "uk.org.lidalia:slf4j-test:1.0.1"
  testImplementation "org.junit.jupiter:junit-jupiter:5.4.1"
  testImplementation "org.mockito:mockito-core:2.25.1"
  testImplementation "org.mockito:mockito-junit-jupiter:2.25.1"
  testImplementation "junit-addons:junit-addons:1.4"

  //testImplementation fileTree(dir: 'build/libs', include: '*.jar')

  //testImplementation configurations.compileOnly
}
